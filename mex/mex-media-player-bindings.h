/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef _DBUS_GLIB_ASYNC_DATA_FREE
#define _DBUS_GLIB_ASYNC_DATA_FREE
static
#ifdef G_HAVE_INLINE
inline
#endif
void
_dbus_glib_async_data_free (gpointer stuff)
{
	g_slice_free (DBusGAsyncData, stuff);
}
#endif

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_com_meego_mex_MediaPlayer
#define DBUS_GLIB_CLIENT_WRAPPERS_com_meego_mex_MediaPlayer

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_meego_mex_MediaPlayer_set_audio_volume (DBusGProxy *proxy, const gdouble IN_volume, GError **error)

{
  return dbus_g_proxy_call (proxy, "SetAudioVolume", error, G_TYPE_DOUBLE, IN_volume, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*com_meego_mex_MediaPlayer_set_audio_volume_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
com_meego_mex_MediaPlayer_set_audio_volume_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(com_meego_mex_MediaPlayer_set_audio_volume_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_meego_mex_MediaPlayer_set_audio_volume_async (DBusGProxy *proxy, const gdouble IN_volume, com_meego_mex_MediaPlayer_set_audio_volume_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SetAudioVolume", com_meego_mex_MediaPlayer_set_audio_volume_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_DOUBLE, IN_volume, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_meego_mex_MediaPlayer_get_audio_volume (DBusGProxy *proxy, gdouble* OUT_volume, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetAudioVolume", error, G_TYPE_INVALID, G_TYPE_DOUBLE, OUT_volume, G_TYPE_INVALID);
}

typedef void (*com_meego_mex_MediaPlayer_get_audio_volume_reply) (DBusGProxy *proxy, gdouble OUT_volume, GError *error, gpointer userdata);

static void
com_meego_mex_MediaPlayer_get_audio_volume_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gdouble OUT_volume;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_DOUBLE, &OUT_volume, G_TYPE_INVALID);
  (*(com_meego_mex_MediaPlayer_get_audio_volume_reply)data->cb) (proxy, OUT_volume, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_meego_mex_MediaPlayer_get_audio_volume_async (DBusGProxy *proxy, com_meego_mex_MediaPlayer_get_audio_volume_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetAudioVolume", com_meego_mex_MediaPlayer_get_audio_volume_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_meego_mex_MediaPlayer_set_uri (DBusGProxy *proxy, const char * IN_uri, GError **error)

{
  return dbus_g_proxy_call (proxy, "SetUri", error, G_TYPE_STRING, IN_uri, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*com_meego_mex_MediaPlayer_set_uri_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
com_meego_mex_MediaPlayer_set_uri_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(com_meego_mex_MediaPlayer_set_uri_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_meego_mex_MediaPlayer_set_uri_async (DBusGProxy *proxy, const char * IN_uri, com_meego_mex_MediaPlayer_set_uri_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SetUri", com_meego_mex_MediaPlayer_set_uri_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_uri, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_meego_mex_MediaPlayer_get_uri (DBusGProxy *proxy, char ** OUT_uri, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetUri", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_uri, G_TYPE_INVALID);
}

typedef void (*com_meego_mex_MediaPlayer_get_uri_reply) (DBusGProxy *proxy, char * OUT_uri, GError *error, gpointer userdata);

static void
com_meego_mex_MediaPlayer_get_uri_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_uri;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_uri, G_TYPE_INVALID);
  (*(com_meego_mex_MediaPlayer_get_uri_reply)data->cb) (proxy, OUT_uri, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_meego_mex_MediaPlayer_get_uri_async (DBusGProxy *proxy, com_meego_mex_MediaPlayer_get_uri_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetUri", com_meego_mex_MediaPlayer_get_uri_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_meego_mex_MediaPlayer_set_playing (DBusGProxy *proxy, const gboolean IN_playing, GError **error)

{
  return dbus_g_proxy_call (proxy, "SetPlaying", error, G_TYPE_BOOLEAN, IN_playing, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*com_meego_mex_MediaPlayer_set_playing_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
com_meego_mex_MediaPlayer_set_playing_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(com_meego_mex_MediaPlayer_set_playing_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_meego_mex_MediaPlayer_set_playing_async (DBusGProxy *proxy, const gboolean IN_playing, com_meego_mex_MediaPlayer_set_playing_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SetPlaying", com_meego_mex_MediaPlayer_set_playing_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_BOOLEAN, IN_playing, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_meego_mex_MediaPlayer_get_playing (DBusGProxy *proxy, gboolean* OUT_playing, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetPlaying", error, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_playing, G_TYPE_INVALID);
}

typedef void (*com_meego_mex_MediaPlayer_get_playing_reply) (DBusGProxy *proxy, gboolean OUT_playing, GError *error, gpointer userdata);

static void
com_meego_mex_MediaPlayer_get_playing_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_playing;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_playing, G_TYPE_INVALID);
  (*(com_meego_mex_MediaPlayer_get_playing_reply)data->cb) (proxy, OUT_playing, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_meego_mex_MediaPlayer_get_playing_async (DBusGProxy *proxy, com_meego_mex_MediaPlayer_get_playing_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetPlaying", com_meego_mex_MediaPlayer_get_playing_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_meego_mex_MediaPlayer_set_progress (DBusGProxy *proxy, const gdouble IN_progress, GError **error)

{
  return dbus_g_proxy_call (proxy, "SetProgress", error, G_TYPE_DOUBLE, IN_progress, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*com_meego_mex_MediaPlayer_set_progress_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
com_meego_mex_MediaPlayer_set_progress_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(com_meego_mex_MediaPlayer_set_progress_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_meego_mex_MediaPlayer_set_progress_async (DBusGProxy *proxy, const gdouble IN_progress, com_meego_mex_MediaPlayer_set_progress_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SetProgress", com_meego_mex_MediaPlayer_set_progress_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_DOUBLE, IN_progress, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_meego_mex_MediaPlayer_get_progress (DBusGProxy *proxy, gdouble* OUT_progress, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetProgress", error, G_TYPE_INVALID, G_TYPE_DOUBLE, OUT_progress, G_TYPE_INVALID);
}

typedef void (*com_meego_mex_MediaPlayer_get_progress_reply) (DBusGProxy *proxy, gdouble OUT_progress, GError *error, gpointer userdata);

static void
com_meego_mex_MediaPlayer_get_progress_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gdouble OUT_progress;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_DOUBLE, &OUT_progress, G_TYPE_INVALID);
  (*(com_meego_mex_MediaPlayer_get_progress_reply)data->cb) (proxy, OUT_progress, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_meego_mex_MediaPlayer_get_progress_async (DBusGProxy *proxy, com_meego_mex_MediaPlayer_get_progress_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetProgress", com_meego_mex_MediaPlayer_get_progress_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_meego_mex_MediaPlayer_get_duration (DBusGProxy *proxy, gdouble* OUT_duration, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetDuration", error, G_TYPE_INVALID, G_TYPE_DOUBLE, OUT_duration, G_TYPE_INVALID);
}

typedef void (*com_meego_mex_MediaPlayer_get_duration_reply) (DBusGProxy *proxy, gdouble OUT_duration, GError *error, gpointer userdata);

static void
com_meego_mex_MediaPlayer_get_duration_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gdouble OUT_duration;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_DOUBLE, &OUT_duration, G_TYPE_INVALID);
  (*(com_meego_mex_MediaPlayer_get_duration_reply)data->cb) (proxy, OUT_duration, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_meego_mex_MediaPlayer_get_duration_async (DBusGProxy *proxy, com_meego_mex_MediaPlayer_get_duration_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetDuration", com_meego_mex_MediaPlayer_get_duration_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_meego_mex_MediaPlayer_get_can_seek (DBusGProxy *proxy, gboolean* OUT_seekable, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetCanSeek", error, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_seekable, G_TYPE_INVALID);
}

typedef void (*com_meego_mex_MediaPlayer_get_can_seek_reply) (DBusGProxy *proxy, gboolean OUT_seekable, GError *error, gpointer userdata);

static void
com_meego_mex_MediaPlayer_get_can_seek_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_seekable;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_seekable, G_TYPE_INVALID);
  (*(com_meego_mex_MediaPlayer_get_can_seek_reply)data->cb) (proxy, OUT_seekable, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_meego_mex_MediaPlayer_get_can_seek_async (DBusGProxy *proxy, com_meego_mex_MediaPlayer_get_can_seek_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetCanSeek", com_meego_mex_MediaPlayer_get_can_seek_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_com_meego_mex_MediaPlayer */

G_END_DECLS
